/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 27 09:10:07 GMT 2019
 */

package org.sse.recommendservice.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.ResponseEntity;
import org.sse.recommendservice.controller.RecommendController;
import org.sse.recommendservice.service.RecommendService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RecommendController_ESTest extends RecommendController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RecommendController recommendController0 = new RecommendController();
      RecommendService recommendService0 = mock(RecommendService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "{TWrX@K69?y~1").when(recommendService0).getTrainData(anyInt());
      Injector.inject(recommendController0, (Class<?>) RecommendController.class, "recommendService", (Object) recommendService0);
      Injector.validateBean(recommendController0, (Class<?>) RecommendController.class);
      recommendController0.getTrainData(0);
      ResponseEntity<FileSystemResource> responseEntity0 = recommendController0.getTrainData(0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RecommendController recommendController0 = new RecommendController();
      RecommendService recommendService0 = mock(RecommendService.class, new ViolatedAssumptionAnswer());
      Injector.inject(recommendController0, (Class<?>) RecommendController.class, "recommendService", (Object) recommendService0);
      Injector.validateBean(recommendController0, (Class<?>) RecommendController.class);
      recommendController0.recommendService = null;
      // Undeclared exception!
      try { 
        recommendController0.getTrainData((-1002));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sse.recommendservice.controller.RecommendController", e);
      }
  }
}
