/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 25 15:31:55 GMT 2019
 */

package org.sse.userservice.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.sse.userservice.mapper.UserMapper;
import org.sse.userservice.model.Result;
import org.sse.userservice.model.User;
import org.sse.userservice.service.UserService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserService_ESTest extends UserService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user1).when(userMapper0).getUserByEmail(anyString());
      user1.setUserId(3457L);
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      UserMapper userMapper1 = userService0.userMapper;
      userMapper1.getUserByEmail("Register fail");
      User user2 = userService0.getUserInfoWithoutPassword("Register fail");
      assertNull(user2.getPhone());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapper0).getUserByEmail(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      user0.setUserId((-7L));
      User user1 = userService0.getUserInfoWithoutPassword("=$%^$}Psnz5K{XM");
      assertNull(user1.getNickname());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user1).when(userMapper0).getUserByEmail(anyString());
      user1.setGender((-1893L));
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      UserMapper userMapper1 = userService0.userMapper;
      userMapper1.getUserByEmail("Register fail");
      User user2 = userService0.getUserInfoWithoutPassword("Register fail");
      assertNull(user2.getBornPlace());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user1).when(userMapper0).getUserByEmail(anyString());
      user1.setAge(1917L);
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      UserMapper userMapper1 = userService0.userMapper;
      userMapper1.getUserByEmail("");
      User user2 = userService0.getUserInfoWithoutPassword("Register fail");
      assertNull(user2.getNickname());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapper0).getUserByEmail(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      user0.setAge((-1L));
      User user1 = userService0.getUserInfoWithoutPassword("");
      assertEquals(0L, user1.getUserId());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UserService userService0 = new UserService();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapper0).getUserByEmail(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = new User();
      user0.setPassword("");
      // Undeclared exception!
      userService0.register(user0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0, (User) null).when(userMapper0).getUserByEmail(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      UserMapper userMapper1 = userService0.userMapper;
      userService0.userMapper = userMapper1;
      User user1 = userService0.getUserInfoWithoutPassword("j}+i-^&'`q:vxF3");
      user1.setPhone("j}+i-^&'`q:vxF3");
      user1.setBornPlace("");
      user1.setGender(4878L);
      // Undeclared exception!
      try { 
        userService0.register(user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UserService userService0 = new UserService();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapper0).getUserByEmail(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      // Undeclared exception!
      try { 
        userService0.getUserInfoWithoutPassword("NEVER");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sse.userservice.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      User user1 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapper0).getUserByEmail(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Result result0 = userService0.login(user1);
      assertEquals("No such user", result0.getMsg());
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("Rgister fairl").when(user0).getPassword();
      doReturn("Rgister fairl").when(user0).getPhone();
      doReturn("Rgister fairl").when(user0).toString();
      User user1 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user1).when(userMapper0).getUserByEmail(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user2 = userService0.getUserInfoWithoutPassword("Rgister fairl");
      // Undeclared exception!
      userService0.login(user2);
  }
}
